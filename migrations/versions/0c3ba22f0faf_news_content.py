"""news content

Revision ID: 0c3ba22f0faf
Revises: cd155979dc4d
Create Date: 2024-11-11 18:22:07.781194

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '0c3ba22f0faf'
down_revision = 'cd155979dc4d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bundles',
    sa.Column('bundle_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('discount_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.PrimaryKeyConstraint('bundle_id')
    )
    op.create_table('suppliers',
    sa.Column('supplier_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('contact_info', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('supplier_id')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('bundle_items',
    sa.Column('bundle_item_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('bundle_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bundle_id'], ['bundles.bundle_id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.PrimaryKeyConstraint('bundle_item_id')
    )
    op.create_table('product_inventory',
    sa.Column('inventory_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('restock_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.supplier_id'], ),
    sa.PrimaryKeyConstraint('inventory_id')
    )
    op.create_table('product_tags',
    sa.Column('product_tag_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ),
    sa.PrimaryKeyConstraint('product_tag_id')
    )
    op.create_table('wishlists',
    sa.Column('wishlist_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('wishlist_id')
    )
    op.create_table('wishlist_items',
    sa.Column('wishlist_item_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('wishlist_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.ForeignKeyConstraint(['wishlist_id'], ['wishlists.wishlist_id'], ),
    sa.PrimaryKeyConstraint('wishlist_item_id')
    )
    with op.batch_alter_table('discounts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('discount_type', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('flat_amount', sa.Numeric(precision=10, scale=2), nullable=True))
        batch_op.add_column(sa.Column('usage_limit', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('usage_per_user', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('applicable_to_order', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('applicable_to_product', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('applicable_category', sa.String(length=50), nullable=True))
        batch_op.alter_column('percentage',
               existing_type=mysql.DECIMAL(precision=5, scale=2),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('discounts', schema=None) as batch_op:
        batch_op.alter_column('percentage',
               existing_type=mysql.DECIMAL(precision=5, scale=2),
               nullable=False)
        batch_op.drop_column('applicable_category')
        batch_op.drop_column('applicable_to_product')
        batch_op.drop_column('applicable_to_order')
        batch_op.drop_column('usage_per_user')
        batch_op.drop_column('usage_limit')
        batch_op.drop_column('flat_amount')
        batch_op.drop_column('discount_type')

    op.drop_table('wishlist_items')
    op.drop_table('wishlists')
    op.drop_table('product_tags')
    op.drop_table('product_inventory')
    op.drop_table('bundle_items')
    op.drop_table('tags')
    op.drop_table('suppliers')
    op.drop_table('bundles')
    # ### end Alembic commands ###
